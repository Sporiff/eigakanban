basePath: /api/v1
definitions:
  handlers.AddBoard.AddBoardRequest:
    properties:
      description:
        example: A short description
        type: string
      name:
        example: My Queue
        type: string
      user_uuid:
        example: 00ca71c5-7c8a-4470-ab47-f962d33c1303
        type: string
    required:
    - name
    - user_uuid
    type: object
  handlers.BoardsResponse:
    properties:
      description:
        example: A short description
        type: string
      name:
        example: My queue
        type: string
      uuid:
        example: 00000000-0000-0000-0000-000000000000
        type: string
    type: object
  handlers.DeleteBoard.BoardDeletedResponse:
    properties:
      success:
        example: 'Board deleted: 77b62cff-0020-43d9-a90c-5d35bff89f7a'
        type: string
    type: object
  handlers.DeleteUser.UserDeletedResponse:
    properties:
      success:
        example: 'user deleted: 77b62cff-0020-43d9-a90c-5d35bff89f7a'
        type: string
    type: object
  handlers.GetAllBoards.PaginatedBoardsResponse:
    properties:
      boards:
        items:
          $ref: '#/definitions/handlers.BoardsResponse'
        type: array
      pagination:
        $ref: '#/definitions/types.Pagination'
    type: object
  handlers.GetAllUsers.PaginatedUsersResponse:
    properties:
      pagination:
        $ref: '#/definitions/types.Pagination'
      users:
        items:
          $ref: '#/definitions/handlers.UserResponse'
        type: array
    type: object
  handlers.LoginUser.LoginUserRequest:
    properties:
      email:
        example: test@test.com
        type: string
      password:
        example: password
        type: string
      username:
        example: test
        type: string
    required:
    - password
    type: object
  handlers.LoginUser.NoUserFoundResponse:
    properties:
      error:
        example: User not found
        type: string
    type: object
  handlers.LoginUser.TokenResponse:
    properties:
      token:
        example: jwt-token-string
        type: string
    type: object
  handlers.LogoutUser.AlreadyLoggedOutResponse:
    properties:
      error:
        example: Already logged out
        type: string
    type: object
  handlers.LogoutUser.LogoutSuccessResponse:
    properties:
      message:
        example: Logged out successfully
        type: string
    type: object
  handlers.LogoutUser.RefreshTokenMissingResponse:
    properties:
      error:
        example: Refresh token is required
        type: string
    type: object
  handlers.MissingFieldResponse:
    description: an example of a missing field response
    properties:
      error:
        properties:
          username:
            example: This field is required
            type: string
        type: object
    type: object
  handlers.RegisterUser.RegisterUserRequest:
    properties:
      email:
        example: test@test.com
        type: string
      password:
        example: password
        type: string
      username:
        example: test
        type: string
    required:
    - email
    - password
    - username
    type: object
  handlers.UpdateBoard.UpdateBoardRequest:
    properties:
      description:
        example: A short description
        type: string
      name:
        example: My Board
        type: string
    type: object
  handlers.UpdateUser.UpdateUserRequest:
    properties:
      bio:
        example: This is a bio
        type: string
      full_name:
        example: Tim Test
        type: string
      username:
        example: new_username
        type: string
    type: object
  handlers.UserResponse:
    description: JSON representation of a user in the system
    properties:
      bio:
        example: This is a bio
        type: string
      full_name:
        example: Tim Test
        type: string
      username:
        example: username
        type: string
      uuid:
        example: 77b62cff-0020-43d9-a90c-5d35bff89f7a
        type: string
    type: object
  types.ErrorResponse:
    description: an unknown error
    properties:
      error:
        example: internal server error
        type: string
    type: object
  types.Pagination:
    description: pagination information
    properties:
      page:
        example: 1
        type: integer
      page_size:
        example: 50
        type: integer
      total:
        example: 2
        type: integer
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
info:
  contact:
    email: cda@sporiff.dev
    name: Ciar√°n Ainsworth
    url: https://codeberg.org/sporiff/eigakanban/issues
  description: The REST API for the eigakanban server
  license:
    name: AGPL3 or Later
    url: https://codeberg.org/sporiff/eigakanban/src/branch/main/LICENSE
  title: eigakanban API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Log in to user account using email or username
      parameters:
      - description: Login details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginUser.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login
          schema:
            $ref: '#/definitions/handlers.LoginUser.TokenResponse'
        "400":
          description: Missing mandatory fields
          schema:
            $ref: '#/definitions/handlers.MissingFieldResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.LoginUser.NoUserFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Log in
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Log out of the app
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/handlers.LogoutUser.LogoutSuccessResponse'
        "400":
          description: Missing refresh token
          schema:
            $ref: '#/definitions/handlers.LogoutUser.RefreshTokenMissingResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Log out
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterUser.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User registered successfully
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "400":
          description: Missing mandatory fields
          schema:
            $ref: '#/definitions/handlers.MissingFieldResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Register a new user account
      tags:
      - auth
  /boards:
    get:
      consumes:
      - application/json
      description: Get all boards in a paginated list
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetAllBoards.PaginatedBoardsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all boards
      tags:
      - boards
    post:
      consumes:
      - application/json
      description: Add a new board for a user
      parameters:
      - description: Board details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.AddBoard.AddBoardRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Board added successfully
          schema:
            $ref: '#/definitions/handlers.BoardsResponse'
        "400":
          description: Missing mandatory fields
          schema:
            $ref: '#/definitions/handlers.MissingFieldResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add a new board
      tags:
      - boards
  /boards/{uuid}:
    delete:
      consumes:
      - application/json
      description: Delete a board by UUID
      parameters:
      - description: Board UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Board deleted successfully
          schema:
            $ref: '#/definitions/handlers.DeleteBoard.BoardDeletedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete board
      tags:
      - boards
    get:
      consumes:
      - application/json
      description: Get a board by UUID
      parameters:
      - description: Board UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.BoardsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get board by UUID
      tags:
      - boards
  /user/{uuid}/boards:
    get:
      consumes:
      - application/json
      description: Get all boards for a user in a paginated list
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetAllBoards.PaginatedBoardsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all boards for a user
      tags:
      - boards
  /users:
    get:
      consumes:
      - application/json
      description: Get all users in a paginated list
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetAllUsers.PaginatedUsersResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
  /users/{uuid}:
    delete:
      consumes:
      - application/json
      description: Delete a user by UUID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/handlers.DeleteUser.UserDeletedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a user by UUID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by UUID
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Update user details by UUID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: User details to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUser.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user details
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
