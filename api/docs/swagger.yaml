basePath: /api/v1
definitions:
  types.AddItemRequest:
    description: a request body for adding a new item
    properties:
      title:
        example: Item title
        type: string
    type: object
  types.AddStatusRequest:
    description: A request body for adding a new status
    properties:
      label:
        example: test
        type: string
    required:
    - label
    type: object
  types.AlreadyLoggedOutResponse:
    description: user already logged out
    properties:
      error:
        example: already logged out
        type: string
    type: object
  types.ErrorResponse:
    description: an unknown error
    properties:
      error:
        example: internal server error
        type: string
    type: object
  types.ItemDeletedResponse:
    description: A success message confirming the item was deleted
    properties:
      success:
        example: 'Item deleted: 77b62cff-0020-43d9-a90c-5d35bff89f7a'
        type: string
    type: object
  types.ItemsResponse:
    properties:
      title:
        example: Item title
        type: string
      uuid:
        example: 00000000-0000-0000-0000-000000000000
        type: string
    type: object
  types.ListItemsResponse:
    properties:
      item_uuid:
        example: 00000000-0000-0000-0000-000000000002
        type: string
      list_uuid:
        example: 00000000-0000-0000-0000-000000000001
        type: string
      position:
        example: 0
        type: integer
      status:
        example: Backlog
        type: string
      uuid:
        example: 00000000-0000-0000-0000-000000000000
        type: string
    type: object
  types.LoginUserRequest:
    description: request body for a login request. either email or username must be
      provided
    properties:
      email:
        example: test@test.com
        type: string
      password:
        example: password
        type: string
      username:
        example: test
        type: string
    required:
    - password
    type: object
  types.LogoutSuccessResponse:
    description: user logged out successfully
    properties:
      message:
        example: logged out successfully
        type: string
    type: object
  types.MissingFieldResponse:
    description: an example of a missing field response an example of a missing field
      response
    properties:
      error:
        properties:
          username:
            example: This field is required
            type: string
        type: object
    type: object
  types.PaginatedItemsResponse:
    description: a response containing a list of items and a pagination object
    properties:
      items:
        items:
          $ref: '#/definitions/types.ItemsResponse'
        type: array
      pagination:
        $ref: '#/definitions/types.Pagination'
    type: object
  types.PaginatedListItemsResponse:
    properties:
      list_items:
        items:
          $ref: '#/definitions/types.ListItemsResponse'
        type: array
      pagination:
        $ref: '#/definitions/types.Pagination'
    type: object
  types.PaginatedStatusesResponse:
    description: a paginated list of statuses
    properties:
      pagination:
        $ref: '#/definitions/types.Pagination'
      statuses:
        items:
          $ref: '#/definitions/types.StatusesResponse'
        type: array
    type: object
  types.PaginatedUsersResponse:
    description: a response containing a list of users and a pagination object
    properties:
      pagination:
        $ref: '#/definitions/types.Pagination'
      users:
        items:
          $ref: '#/definitions/types.UserResponse'
        type: array
    type: object
  types.Pagination:
    description: pagination information
    properties:
      page:
        example: 1
        type: integer
      page_size:
        example: 50
        type: integer
      total:
        example: 2
        type: integer
    type: object
  types.RefreshTokenMissingResponse:
    description: refresh token missing
    properties:
      error:
        example: refresh token missing
        type: string
    type: object
  types.RegisterUserRequest:
    description: A request body for registering a new user
    properties:
      email:
        example: test@test.com
        type: string
      password:
        example: password
        type: string
      username:
        example: test
        type: string
    required:
    - email
    - password
    - username
    type: object
  types.StatusesResponse:
    description: status details
    properties:
      label:
        example: backlog
        type: string
      uuid:
        example: 00000000-0000-0000-0000-000000000000
        type: string
    type: object
  types.TokenResponse:
    description: a response containing a JWT for authentication and a refresh token
    properties:
      access_token:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      expiry_date:
        example: 2025-02-15 11:59:01.837871 +0100 CET m=+3603.614509085
        type: string
      refresh_token:
        example: 00000000-0000-0000-0000-000000000000
        type: string
    type: object
  types.UpdateItemRequest:
    description: a request body for updating an item
    properties:
      title:
        example: Item title
        type: string
    type: object
  types.UpdateUserRequest:
    description: a request body for updating a user
    properties:
      bio:
        example: This is a bio
        type: string
      full_name:
        example: Tim Test
        type: string
      username:
        example: new_username
        type: string
    type: object
  types.UserDeletedResponse:
    description: A success message confirming the user was deleted
    properties:
      success:
        example: 'user deleted: 77b62cff-0020-43d9-a90c-5d35bff89f7a'
        type: string
    type: object
  types.UserNotFoundResponse:
    description: User not found
    properties:
      error:
        example: user not found
        type: string
    type: object
  types.UserResponse:
    description: JSON representation of a user in the system
    properties:
      bio:
        example: This is a bio
        type: string
      full_name:
        example: Tim Test
        type: string
      username:
        example: username
        type: string
      uuid:
        example: 77b62cff-0020-43d9-a90c-5d35bff89f7a
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
info:
  contact:
    email: ~sporiff/eigakanban@lists.sr.ht
    name: eigakanban developers
    url: https://codeberg.org/sporiff/eigakanban/issues
  description: The REST API for the eigakanban server
  license:
    name: AGPL3 or Later
    url: https://codeberg.org/sporiff/eigakanban/src/branch/main/LICENSE
  title: eigakanban API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Log in to user account using email or username
      parameters:
      - description: Login details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/types.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login
          schema:
            $ref: '#/definitions/types.TokenResponse'
        "400":
          description: Missing mandatory fields
          schema:
            $ref: '#/definitions/types.MissingFieldResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/types.UserNotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Log in
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Log out of the app
      parameters:
      - description: Refresh token
        in: header
        name: Refresh-Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/types.LogoutSuccessResponse'
        "400":
          description: Missing refresh token
          schema:
            $ref: '#/definitions/types.RefreshTokenMissingResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Log out
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Log out of the app
      parameters:
      - description: Refresh token
        in: header
        name: Refresh-Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/types.LogoutSuccessResponse'
        "400":
          description: Missing refresh token
          schema:
            $ref: '#/definitions/types.RefreshTokenMissingResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Log out
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/types.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User registered successfully
          schema:
            $ref: '#/definitions/types.UserResponse'
        "400":
          description: Missing mandatory fields
          schema:
            $ref: '#/definitions/types.MissingFieldResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Register a new user account
      tags:
      - auth
  /items:
    get:
      consumes:
      - application/json
      description: Get all items in a paginated list
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedItemsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all items
      tags:
      - items
    post:
      consumes:
      - application/json
      description: Add a new item
      parameters:
      - description: Item details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/types.AddItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Item added successfully
          schema:
            $ref: '#/definitions/types.ItemsResponse'
        "400":
          description: Missing mandatory fields
          schema:
            $ref: '#/definitions/types.MissingFieldResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add a new item
      tags:
      - items
  /items/{uuid}:
    delete:
      consumes:
      - application/json
      description: Delete an item by UUID
      parameters:
      - description: Board UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Board deleted successfully
          schema:
            $ref: '#/definitions/types.ItemDeletedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete item
      tags:
      - items
    get:
      consumes:
      - application/json
      description: Get an item by UUID
      parameters:
      - description: Item UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ItemsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get item by UUID
      tags:
      - items
    patch:
      consumes:
      - application/json
      description: Update item details by UUID
      parameters:
      - description: Item UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Item details to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/types.UpdateItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ItemsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update item details
      tags:
      - items
  /list_items:
    get:
      consumes:
      - application/json
      description: Get all list items in a paginated list
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedListItemsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all list items
      tags:
      - list_items
  /lists/{uuid}/items:
    get:
      consumes:
      - application/json
      description: Get all items in a list as a paginated list
      parameters:
      - description: List UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedListItemsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all items in a list
      tags:
      - lists
  /search:
    get:
      consumes:
      - application/json
      description: Search for movies on TMDB
      parameters:
      - description: List UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedListItemsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Search for movies on TMDB
      tags:
      - search
  /statuses:
    get:
      consumes:
      - application/json
      description: Fetch all statuses as a paginated list
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      responses:
        "200":
          description: Statuses
          schema:
            $ref: '#/definitions/types.PaginatedStatusesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Fetch all statuses
      tags:
      - statuses
    post:
      consumes:
      - application/json
      description: Add a new status
      parameters:
      - description: Status details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/types.AddStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Status added successfully
          schema:
            $ref: '#/definitions/types.StatusesResponse'
        "400":
          description: Missing mandatory fields
          schema:
            $ref: '#/definitions/types.MissingFieldResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add a new status
      tags:
      - statuses
  /users:
    get:
      consumes:
      - application/json
      description: Get all users in a paginated list
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedUsersResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
  /users/{uuid}:
    delete:
      consumes:
      - application/json
      description: Delete a user by UUID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/types.UserDeletedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a user by UUID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by UUID
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Update user details by UUID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: User details to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user details
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
