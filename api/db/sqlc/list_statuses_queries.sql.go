// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: list_statuses_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addListStatus = `-- name: AddListStatus :one
INSERT INTO
    list_statuses (list_id, status_id)
VALUES
    (
        (
            SELECT
                l.list_id
            FROM
                lists l
            WHERE
                l.uuid = $1
        ),
        (
            SELECT
                s.status_id
            FROM
                statuses s
            WHERE
                s.uuid = $2
        )
    )
RETURNING
    uuid,
    created_date
`

type AddListStatusParams struct {
	ListUuid   pgtype.UUID `json:"list_uuid"`
	StatusUuid pgtype.UUID `json:"status_uuid"`
}

type AddListStatusRow struct {
	Uuid        pgtype.UUID        `json:"uuid"`
	CreatedDate pgtype.Timestamptz `json:"created_date"`
}

func (q *Queries) AddListStatus(ctx context.Context, arg AddListStatusParams) (AddListStatusRow, error) {
	row := q.db.QueryRow(ctx, addListStatus, arg.ListUuid, arg.StatusUuid)
	var i AddListStatusRow
	err := row.Scan(&i.Uuid, &i.CreatedDate)
	return i, err
}

const deleteListStatus = `-- name: DeleteListStatus :exec
DELETE FROM list_statuses
WHERE
    uuid = $1
`

func (q *Queries) DeleteListStatus(ctx context.Context, listStatusUuid pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteListStatus, listStatusUuid)
	return err
}

const getListStatus = `-- name: GetListStatus :one
SELECT
    uuid,
    created_date
FROM
    list_statuses
WHERE
    uuid = $1
LIMIT
    1
`

type GetListStatusRow struct {
	Uuid        pgtype.UUID        `json:"uuid"`
	CreatedDate pgtype.Timestamptz `json:"created_date"`
}

func (q *Queries) GetListStatus(ctx context.Context, listStatusUuid pgtype.UUID) (GetListStatusRow, error) {
	row := q.db.QueryRow(ctx, getListStatus, listStatusUuid)
	var i GetListStatusRow
	err := row.Scan(&i.Uuid, &i.CreatedDate)
	return i, err
}

const getStatusesForList = `-- name: GetStatusesForList :many
SELECT
    ls.uuid,
    s.uuid,
    s.label,
    ls.created_date
FROM
    list_statuses ls
        JOIN statuses s ON s.status_id = ls.status_id
        JOIN lists l ON l.list_id = ls.list_id
WHERE
    l.uuid = $1
ORDER BY
    l.uuid,
    ls.created_date
LIMIT
    $3
    OFFSET
    $2
`

type GetStatusesForListParams struct {
	ListUuid pgtype.UUID `json:"list_uuid"`
	Page     int32       `json:"page"`
	PageSize int32       `json:"page_size"`
}

type GetStatusesForListRow struct {
	Uuid        pgtype.UUID        `json:"uuid"`
	Uuid_2      pgtype.UUID        `json:"uuid_2"`
	Label       pgtype.Text        `json:"label"`
	CreatedDate pgtype.Timestamptz `json:"created_date"`
}

func (q *Queries) GetStatusesForList(ctx context.Context, arg GetStatusesForListParams) ([]GetStatusesForListRow, error) {
	rows, err := q.db.Query(ctx, getStatusesForList, arg.ListUuid, arg.Page, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStatusesForListRow
	for rows.Next() {
		var i GetStatusesForListRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Uuid_2,
			&i.Label,
			&i.CreatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
