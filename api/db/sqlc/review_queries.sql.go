// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: review_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addReview = `-- name: AddReview :one
INSERT INTO
    reviews (item_id, user_id, content)
VALUES
    ($1, $2, $3)
RETURNING
    review_id,
    user_id,
    item_id,
    content,
    created_date
`

type AddReviewParams struct {
	ItemID  pgtype.Int8 `json:"item_id"`
	UserID  pgtype.Int8 `json:"user_id"`
	Content string      `json:"content"`
}

type AddReviewRow struct {
	ReviewID    pgtype.Int8        `json:"review_id"`
	UserID      pgtype.Int8        `json:"user_id"`
	ItemID      pgtype.Int8        `json:"item_id"`
	Content     string             `json:"content"`
	CreatedDate pgtype.Timestamptz `json:"created_date"`
}

func (q *Queries) AddReview(ctx context.Context, arg AddReviewParams) (AddReviewRow, error) {
	row := q.db.QueryRow(ctx, addReview, arg.ItemID, arg.UserID, arg.Content)
	var i AddReviewRow
	err := row.Scan(
		&i.ReviewID,
		&i.UserID,
		&i.ItemID,
		&i.Content,
		&i.CreatedDate,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews
WHERE
    review_id = $1
`

func (q *Queries) DeleteReview(ctx context.Context, reviewID pgtype.Int8) error {
	_, err := q.db.Exec(ctx, deleteReview, reviewID)
	return err
}

const getReview = `-- name: GetReview :one
SELECT
    review_id, content, user_id, item_id, created_date
FROM
    reviews
WHERE
    review_id = $1
LIMIT
    1
`

func (q *Queries) GetReview(ctx context.Context, reviewID pgtype.Int8) (Review, error) {
	row := q.db.QueryRow(ctx, getReview, reviewID)
	var i Review
	err := row.Scan(
		&i.ReviewID,
		&i.Content,
		&i.UserID,
		&i.ItemID,
		&i.CreatedDate,
	)
	return i, err
}

const getReviewsForItem = `-- name: GetReviewsForItem :many
SELECT
    review_id, content, user_id, item_id, created_date
FROM
    reviews
WHERE
    item_id = $1
ORDER BY
    created_date
LIMIT
    $2
    OFFSET
    $3
`

type GetReviewsForItemParams struct {
	ItemID pgtype.Int8 `json:"item_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) GetReviewsForItem(ctx context.Context, arg GetReviewsForItemParams) ([]Review, error) {
	rows, err := q.db.Query(ctx, getReviewsForItem, arg.ItemID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ReviewID,
			&i.Content,
			&i.UserID,
			&i.ItemID,
			&i.CreatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReviewsForUser = `-- name: GetReviewsForUser :many
SELECT
    review_id, content, user_id, item_id, created_date
FROM
    reviews
WHERE
    user_id = $1
ORDER BY
    created_date
LIMIT
    $2
    OFFSET
    $3
`

type GetReviewsForUserParams struct {
	UserID pgtype.Int8 `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) GetReviewsForUser(ctx context.Context, arg GetReviewsForUserParams) ([]Review, error) {
	rows, err := q.db.Query(ctx, getReviewsForUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ReviewID,
			&i.Content,
			&i.UserID,
			&i.ItemID,
			&i.CreatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReview = `-- name: UpdateReview :one
UPDATE reviews
SET
    content = $2
WHERE
    review_id = $1
RETURNING
    review_id,
    item_id,
    content
`

type UpdateReviewParams struct {
	ReviewID pgtype.Int8 `json:"review_id"`
	Content  string      `json:"content"`
}

type UpdateReviewRow struct {
	ReviewID pgtype.Int8 `json:"review_id"`
	ItemID   pgtype.Int8 `json:"item_id"`
	Content  string      `json:"content"`
}

func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) (UpdateReviewRow, error) {
	row := q.db.QueryRow(ctx, updateReview, arg.ReviewID, arg.Content)
	var i UpdateReviewRow
	err := row.Scan(&i.ReviewID, &i.ItemID, &i.Content)
	return i, err
}
