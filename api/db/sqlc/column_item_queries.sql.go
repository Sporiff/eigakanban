// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: column_item_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addColumnItemAtPosition = `-- name: AddColumnItemAtPosition :one
WITH moved_items AS (
    UPDATE column_items
        SET position = position + 1
        WHERE column_id = $1 AND position >= $2
        RETURNING column_item_id, column_id, item_id, position
)
INSERT INTO column_items (column_id, item_id, user_id, position)
VALUES ($1, $2, $3, $2)
RETURNING column_item_id, column_id, item_id, position
`

type AddColumnItemAtPositionParams struct {
	ColumnID pgtype.Int8 `json:"column_id"`
	ItemID   pgtype.Int8 `json:"item_id"`
	UserID   pgtype.Int8 `json:"user_id"`
}

type AddColumnItemAtPositionRow struct {
	ColumnItemID pgtype.Int8 `json:"column_item_id"`
	ColumnID     pgtype.Int8 `json:"column_id"`
	ItemID       pgtype.Int8 `json:"item_id"`
	Position     pgtype.Int4 `json:"position"`
}

func (q *Queries) AddColumnItemAtPosition(ctx context.Context, arg AddColumnItemAtPositionParams) (AddColumnItemAtPositionRow, error) {
	row := q.db.QueryRow(ctx, addColumnItemAtPosition, arg.ColumnID, arg.ItemID, arg.UserID)
	var i AddColumnItemAtPositionRow
	err := row.Scan(
		&i.ColumnItemID,
		&i.ColumnID,
		&i.ItemID,
		&i.Position,
	)
	return i, err
}

const deleteColumnItem = `-- name: DeleteColumnItem :exec
WITH deleted_item AS (
    DELETE FROM column_items as ci
        WHERE ci.column_item_id = $1
        RETURNING ci.position, ci.column_id
)
UPDATE column_items
SET position = position - 1
WHERE column_id = (SELECT di.column_id FROM deleted_item AS di)
  AND position > (SELECT di.position FROM deleted_item AS di)
`

func (q *Queries) DeleteColumnItem(ctx context.Context, columnItemID pgtype.Int8) error {
	_, err := q.db.Exec(ctx, deleteColumnItem, columnItemID)
	return err
}

const moveColumnItemDown = `-- name: MoveColumnItemDown :one
WITH current_position AS (
    SELECT position
    FROM column_items AS ci
    WHERE ci.column_item_id = $1
),
     items_to_shift AS (
         SELECT ci.column_item_id, ci.position
         FROM column_items AS ci
         WHERE ci.column_id = $2
           AND ci.position = (SELECT cp.position FROM current_position AS cp) + 1
     )
UPDATE column_items AS ci
SET position = CASE
                   WHEN ci.column_item_id = $1 THEN ci.position + 1
                   WHEN ci.column_item_id IN (SELECT its.column_item_id FROM items_to_shift AS its) THEN ci.position - 1
                   ELSE ci.position
    END
WHERE ci.column_item_id IN (SELECT its.column_item_id FROM items_to_shift AS its)
   OR ci.column_item_id = $1
RETURNING ci.column_item_id, ci.column_id, ci.item_id, ci.position
`

type MoveColumnItemDownParams struct {
	ColumnItemID pgtype.Int8 `json:"column_item_id"`
	ColumnID     pgtype.Int8 `json:"column_id"`
}

type MoveColumnItemDownRow struct {
	ColumnItemID pgtype.Int8 `json:"column_item_id"`
	ColumnID     pgtype.Int8 `json:"column_id"`
	ItemID       pgtype.Int8 `json:"item_id"`
	Position     pgtype.Int4 `json:"position"`
}

func (q *Queries) MoveColumnItemDown(ctx context.Context, arg MoveColumnItemDownParams) (MoveColumnItemDownRow, error) {
	row := q.db.QueryRow(ctx, moveColumnItemDown, arg.ColumnItemID, arg.ColumnID)
	var i MoveColumnItemDownRow
	err := row.Scan(
		&i.ColumnItemID,
		&i.ColumnID,
		&i.ItemID,
		&i.Position,
	)
	return i, err
}

const moveColumnItemUp = `-- name: MoveColumnItemUp :one
WITH current_position AS (
    SELECT position
    FROM column_items AS ci
    WHERE ci.column_item_id = $1
),
     items_to_shift AS (
         SELECT ci.column_item_id, ci.position
         FROM column_items AS ci
         WHERE ci.column_id = $2
           AND ci.position = (SELECT cp.position FROM current_position AS cp) - 1
     )
UPDATE column_items AS ci
SET position = CASE
                   WHEN ci.column_item_id = $1 THEN ci.position - 1
                   WHEN ci.column_item_id IN (SELECT its.column_item_id FROM items_to_shift AS its) THEN ci.position + 1
                   ELSE ci.position
    END
WHERE ci.column_item_id IN (SELECT its.column_item_id FROM items_to_shift AS its)
   OR ci.column_item_id = $1
RETURNING ci.column_item_id, ci.column_id, ci.item_id, ci.position
`

type MoveColumnItemUpParams struct {
	ColumnItemID pgtype.Int8 `json:"column_item_id"`
	ColumnID     pgtype.Int8 `json:"column_id"`
}

type MoveColumnItemUpRow struct {
	ColumnItemID pgtype.Int8 `json:"column_item_id"`
	ColumnID     pgtype.Int8 `json:"column_id"`
	ItemID       pgtype.Int8 `json:"item_id"`
	Position     pgtype.Int4 `json:"position"`
}

func (q *Queries) MoveColumnItemUp(ctx context.Context, arg MoveColumnItemUpParams) (MoveColumnItemUpRow, error) {
	row := q.db.QueryRow(ctx, moveColumnItemUp, arg.ColumnItemID, arg.ColumnID)
	var i MoveColumnItemUpRow
	err := row.Scan(
		&i.ColumnItemID,
		&i.ColumnID,
		&i.ItemID,
		&i.Position,
	)
	return i, err
}

const moveItemToColumn = `-- name: MoveItemToColumn :one
WITH moved_items AS (
    UPDATE column_items AS ci
        SET position = position + 1
        WHERE ci.column_id = $2 AND ci.position >= (SELECT ci2.position FROM column_items AS ci2 WHERE ci2.column_item_id = $1)
        RETURNING ci.column_item_id, ci.column_id, ci.item_id, ci.position
)
UPDATE column_items AS ci
SET column_id = $2
WHERE ci.column_item_id = $1
RETURNING ci.column_item_id, ci.column_id, ci.item_id, ci.position
`

type MoveItemToColumnParams struct {
	ColumnItemID pgtype.Int8 `json:"column_item_id"`
	ColumnID     pgtype.Int8 `json:"column_id"`
}

type MoveItemToColumnRow struct {
	ColumnItemID pgtype.Int8 `json:"column_item_id"`
	ColumnID     pgtype.Int8 `json:"column_id"`
	ItemID       pgtype.Int8 `json:"item_id"`
	Position     pgtype.Int4 `json:"position"`
}

func (q *Queries) MoveItemToColumn(ctx context.Context, arg MoveItemToColumnParams) (MoveItemToColumnRow, error) {
	row := q.db.QueryRow(ctx, moveItemToColumn, arg.ColumnItemID, arg.ColumnID)
	var i MoveItemToColumnRow
	err := row.Scan(
		&i.ColumnItemID,
		&i.ColumnID,
		&i.ItemID,
		&i.Position,
	)
	return i, err
}
