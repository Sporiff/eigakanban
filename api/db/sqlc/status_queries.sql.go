// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: status_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addStatus = `-- name: AddStatus :one
INSERT INTO
    statuses (user_id, label)
VALUES
    (
        (
            SELECT
                user_id
            FROM
                users
            WHERE
                users.uuid = $1
        ),
        $2
    )
RETURNING
    uuid,
    label
`

type AddStatusParams struct {
	UserUuid    pgtype.UUID `json:"user_uuid"`
	StatusLabel pgtype.Text `json:"status_label"`
}

type AddStatusRow struct {
	Uuid  pgtype.UUID `json:"uuid"`
	Label pgtype.Text `json:"label"`
}

func (q *Queries) AddStatus(ctx context.Context, arg AddStatusParams) (AddStatusRow, error) {
	row := q.db.QueryRow(ctx, addStatus, arg.UserUuid, arg.StatusLabel)
	var i AddStatusRow
	err := row.Scan(&i.Uuid, &i.Label)
	return i, err
}

const getAllStatuses = `-- name: GetAllStatuses :many
SELECT
    uuid,
    label
FROM
    statuses
ORDER BY
    created_date
LIMIT
    $2
    OFFSET
    $1
`

type GetAllStatusesParams struct {
	Page     int32 `json:"page"`
	PageSize int32 `json:"page_size"`
}

type GetAllStatusesRow struct {
	Uuid  pgtype.UUID `json:"uuid"`
	Label pgtype.Text `json:"label"`
}

func (q *Queries) GetAllStatuses(ctx context.Context, arg GetAllStatusesParams) ([]GetAllStatusesRow, error) {
	rows, err := q.db.Query(ctx, getAllStatuses, arg.Page, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllStatusesRow
	for rows.Next() {
		var i GetAllStatusesRow
		if err := rows.Scan(&i.Uuid, &i.Label); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllStatusesCount = `-- name: GetAllStatusesCount :one
SELECT COUNT(*)
FROM statuses
`

func (q *Queries) GetAllStatusesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAllStatusesCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getStatus = `-- name: GetStatus :one
SELECT
    uuid,
    label
FROM
    statuses
WHERE
    uuid = $1
LIMIT
    1
`

type GetStatusRow struct {
	Uuid  pgtype.UUID `json:"uuid"`
	Label pgtype.Text `json:"label"`
}

func (q *Queries) GetStatus(ctx context.Context, statusUuid pgtype.UUID) (GetStatusRow, error) {
	row := q.db.QueryRow(ctx, getStatus, statusUuid)
	var i GetStatusRow
	err := row.Scan(&i.Uuid, &i.Label)
	return i, err
}

const getStatusesCountForUser = `-- name: GetStatusesCountForUser :one
SELECT COUNT(*)
FROM statuses s
JOIN users u
ON u.user_id = s.user_id
WHERE
    u.uuid = $1
`

func (q *Queries) GetStatusesCountForUser(ctx context.Context, userUuid pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getStatusesCountForUser, userUuid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getStatusesForUser = `-- name: GetStatusesForUser :many
SELECT
    s.uuid,
    s.label
FROM
    statuses s
        JOIN users u ON u.user_id = s.user_id
WHERE
    u.uuid = $1
ORDER BY
    s.created_date
LIMIT
    $3
    OFFSET
    $2
`

type GetStatusesForUserParams struct {
	UserUuid pgtype.UUID `json:"user_uuid"`
	Page     int32       `json:"page"`
	PageSize int32       `json:"page_size"`
}

type GetStatusesForUserRow struct {
	Uuid  pgtype.UUID `json:"uuid"`
	Label pgtype.Text `json:"label"`
}

func (q *Queries) GetStatusesForUser(ctx context.Context, arg GetStatusesForUserParams) ([]GetStatusesForUserRow, error) {
	rows, err := q.db.Query(ctx, getStatusesForUser, arg.UserUuid, arg.Page, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStatusesForUserRow
	for rows.Next() {
		var i GetStatusesForUserRow
		if err := rows.Scan(&i.Uuid, &i.Label); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
