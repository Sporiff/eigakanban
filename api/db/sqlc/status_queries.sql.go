// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: status_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addStatus = `-- name: AddStatus :one
INSERT INTO
    statuses (user_id, label)
VALUES
    ($1, $2)
RETURNING
    status_id,
    user_id,
    label,
    created_date
`

type AddStatusParams struct {
	UserID pgtype.Int8 `json:"user_id"`
	Label  pgtype.Text `json:"label"`
}

func (q *Queries) AddStatus(ctx context.Context, arg AddStatusParams) (Status, error) {
	row := q.db.QueryRow(ctx, addStatus, arg.UserID, arg.Label)
	var i Status
	err := row.Scan(
		&i.StatusID,
		&i.UserID,
		&i.Label,
		&i.CreatedDate,
	)
	return i, err
}

const getAllStatuses = `-- name: GetAllStatuses :many
SELECT status_id, user_id, label, created_date FROM statuses
ORDER BY
    created_date
LIMIT
    $1
    OFFSET
    $2
`

type GetAllStatusesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllStatuses(ctx context.Context, arg GetAllStatusesParams) ([]Status, error) {
	rows, err := q.db.Query(ctx, getAllStatuses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Status
	for rows.Next() {
		var i Status
		if err := rows.Scan(
			&i.StatusID,
			&i.UserID,
			&i.Label,
			&i.CreatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStatus = `-- name: GetStatus :one
SELECT status_id, user_id, label, created_date FROM statuses
WHERE
    status_id = $1
LIMIT
    1
`

func (q *Queries) GetStatus(ctx context.Context, statusID pgtype.Int8) (Status, error) {
	row := q.db.QueryRow(ctx, getStatus, statusID)
	var i Status
	err := row.Scan(
		&i.StatusID,
		&i.UserID,
		&i.Label,
		&i.CreatedDate,
	)
	return i, err
}

const getStatusesForUser = `-- name: GetStatusesForUser :many
SELECT status_id, user_id, label, created_date FROM statuses
WHERE
    user_id = $1
ORDER BY
    created_date
LIMIT
    $2
    OFFSET
    $3
`

type GetStatusesForUserParams struct {
	UserID pgtype.Int8 `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) GetStatusesForUser(ctx context.Context, arg GetStatusesForUserParams) ([]Status, error) {
	rows, err := q.db.Query(ctx, getStatusesForUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Status
	for rows.Next() {
		var i Status
		if err := rows.Scan(
			&i.StatusID,
			&i.UserID,
			&i.Label,
			&i.CreatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
