// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: list_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addList = `-- name: AddList :one
INSERT INTO
    lists (name, user_id)
VALUES
    (
        $1,
        (
            SELECT
                user_id
            FROM
                users
            WHERE
                users.uuid = $2
        )
    )
RETURNING
    uuid,
    name,
    created_date
`

type AddListParams struct {
	Name     string      `json:"name"`
	UserUuid pgtype.UUID `json:"user_uuid"`
}

type AddListRow struct {
	Uuid        pgtype.UUID        `json:"uuid"`
	Name        string             `json:"name"`
	CreatedDate pgtype.Timestamptz `json:"created_date"`
}

func (q *Queries) AddList(ctx context.Context, arg AddListParams) (AddListRow, error) {
	row := q.db.QueryRow(ctx, addList, arg.Name, arg.UserUuid)
	var i AddListRow
	err := row.Scan(&i.Uuid, &i.Name, &i.CreatedDate)
	return i, err
}

const deleteList = `-- name: DeleteList :exec
DELETE FROM lists
WHERE
    uuid = $1
`

func (q *Queries) DeleteList(ctx context.Context, listUuid pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteList, listUuid)
	return err
}

const getListByUuid = `-- name: GetListByUuid :one
SELECT
    uuid,
    name
FROM
    lists
WHERE
    uuid = $1
`

type GetListByUuidRow struct {
	Uuid pgtype.UUID `json:"uuid"`
	Name string      `json:"name"`
}

func (q *Queries) GetListByUuid(ctx context.Context, listUuid pgtype.UUID) (GetListByUuidRow, error) {
	row := q.db.QueryRow(ctx, getListByUuid, listUuid)
	var i GetListByUuidRow
	err := row.Scan(&i.Uuid, &i.Name)
	return i, err
}

const getListsByUser = `-- name: GetListsByUser :many
SELECT
    l.uuid,
    l.name
FROM
    lists l
        JOIN users u ON u.user_id = l.user_id
WHERE
    u.uuid = $1
ORDER BY
    l.created_date
LIMIT
    $3
    OFFSET
    $2
`

type GetListsByUserParams struct {
	UserUuid pgtype.UUID `json:"user_uuid"`
	Page     int32       `json:"page"`
	PageSize int32       `json:"page_size"`
}

type GetListsByUserRow struct {
	Uuid pgtype.UUID `json:"uuid"`
	Name string      `json:"name"`
}

func (q *Queries) GetListsByUser(ctx context.Context, arg GetListsByUserParams) ([]GetListsByUserRow, error) {
	rows, err := q.db.Query(ctx, getListsByUser, arg.UserUuid, arg.Page, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListsByUserRow
	for rows.Next() {
		var i GetListsByUserRow
		if err := rows.Scan(&i.Uuid, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateList = `-- name: UpdateList :one
UPDATE lists
SET
    name = $1
WHERE
    uuid = $2
RETURNING
    uuid,
    name
`

type UpdateListParams struct {
	ListName string      `json:"list_name"`
	ListUuid pgtype.UUID `json:"list_uuid"`
}

type UpdateListRow struct {
	Uuid pgtype.UUID `json:"uuid"`
	Name string      `json:"name"`
}

func (q *Queries) UpdateList(ctx context.Context, arg UpdateListParams) (UpdateListRow, error) {
	row := q.db.QueryRow(ctx, updateList, arg.ListName, arg.ListUuid)
	var i UpdateListRow
	err := row.Scan(&i.Uuid, &i.Name)
	return i, err
}
