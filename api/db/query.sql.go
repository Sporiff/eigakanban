// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addBoard = `-- name: AddBoard :one
INSERT INTO
    boards (name, description, user_id)
VALUES
    ($1, $2, $3)
RETURNING
    board_id,
    name,
    description,
    created_date
`

type AddBoardParams struct {
	Name        string
	Description pgtype.Text
	UserID      pgtype.Int8
}

type AddBoardRow struct {
	BoardID     pgtype.Int8
	Name        string
	Description pgtype.Text
	CreatedDate pgtype.Timestamptz
}

func (q *Queries) AddBoard(ctx context.Context, arg AddBoardParams) (AddBoardRow, error) {
	row := q.db.QueryRow(ctx, addBoard, arg.Name, arg.Description, arg.UserID)
	var i AddBoardRow
	err := row.Scan(
		&i.BoardID,
		&i.Name,
		&i.Description,
		&i.CreatedDate,
	)
	return i, err
}

const addBoardItem = `-- name: AddBoardItem :one
INSERT INTO
    board_items (item_id, board_id, user_id)
VALUES
    ($1, $2, $3)
RETURNING
    board_item_id,
    item_id,
    board_id
`

type AddBoardItemParams struct {
	ItemID  pgtype.Int8
	BoardID pgtype.Int8
	UserID  pgtype.Int8
}

type AddBoardItemRow struct {
	BoardItemID pgtype.Int8
	ItemID      pgtype.Int8
	BoardID     pgtype.Int8
}

func (q *Queries) AddBoardItem(ctx context.Context, arg AddBoardItemParams) (AddBoardItemRow, error) {
	row := q.db.QueryRow(ctx, addBoardItem, arg.ItemID, arg.BoardID, arg.UserID)
	var i AddBoardItemRow
	err := row.Scan(&i.BoardItemID, &i.ItemID, &i.BoardID)
	return i, err
}

const addReview = `-- name: AddReview :one
INSERT INTO
    reviews (item_id, user_id, content)
VALUES
    ($1, $2, $3)
RETURNING
    review_id,
    user_id,
    item_id,
    content,
    created_date
`

type AddReviewParams struct {
	ItemID  pgtype.Int8
	UserID  pgtype.Int8
	Content string
}

type AddReviewRow struct {
	ReviewID    pgtype.Int8
	UserID      pgtype.Int8
	ItemID      pgtype.Int8
	Content     string
	CreatedDate pgtype.Timestamptz
}

func (q *Queries) AddReview(ctx context.Context, arg AddReviewParams) (AddReviewRow, error) {
	row := q.db.QueryRow(ctx, addReview, arg.ItemID, arg.UserID, arg.Content)
	var i AddReviewRow
	err := row.Scan(
		&i.ReviewID,
		&i.UserID,
		&i.ItemID,
		&i.Content,
		&i.CreatedDate,
	)
	return i, err
}

const addStatus = `-- name: AddStatus :one
INSERT INTO
    statuses (user_id, label)
VALUES
    ($1, $2)
RETURNING
    status_id,
    user_id,
    label,
    created_date
`

type AddStatusParams struct {
	UserID pgtype.Int8
	Label  pgtype.Text
}

func (q *Queries) AddStatus(ctx context.Context, arg AddStatusParams) (Status, error) {
	row := q.db.QueryRow(ctx, addStatus, arg.UserID, arg.Label)
	var i Status
	err := row.Scan(
		&i.StatusID,
		&i.UserID,
		&i.Label,
		&i.CreatedDate,
	)
	return i, err
}

const addUser = `-- name: AddUser :one
INSERT INTO
    users (username, hashed_password, email, full_name, bio)
VALUES
    ($1, $2, $3, $4, $5)
RETURNING
    user_id,
    username,
    full_name,
    bio,
    created_date
`

type AddUserParams struct {
	Username       string
	HashedPassword string
	Email          string
	FullName       pgtype.Text
	Bio            pgtype.Text
}

type AddUserRow struct {
	UserID      pgtype.Int8
	Username    string
	FullName    pgtype.Text
	Bio         pgtype.Text
	CreatedDate pgtype.Timestamptz
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (AddUserRow, error) {
	row := q.db.QueryRow(ctx, addUser,
		arg.Username,
		arg.HashedPassword,
		arg.Email,
		arg.FullName,
		arg.Bio,
	)
	var i AddUserRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.FullName,
		&i.Bio,
		&i.CreatedDate,
	)
	return i, err
}

const deleteBoard = `-- name: DeleteBoard :exec
DELETE FROM boards
WHERE
    board_id = $1
`

func (q *Queries) DeleteBoard(ctx context.Context, boardID pgtype.Int8) error {
	_, err := q.db.Exec(ctx, deleteBoard, boardID)
	return err
}

const deleteBoardItem = `-- name: DeleteBoardItem :exec
DELETE FROM board_items
WHERE
    board_item_id = $1
`

func (q *Queries) DeleteBoardItem(ctx context.Context, boardItemID pgtype.Int8) error {
	_, err := q.db.Exec(ctx, deleteBoardItem, boardItemID)
	return err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews
WHERE
    review_id = $1
`

func (q *Queries) DeleteReview(ctx context.Context, reviewID pgtype.Int8) error {
	_, err := q.db.Exec(ctx, deleteReview, reviewID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE
    user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID pgtype.Int8) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getAllBoards = `-- name: GetAllBoards :many
SELECT
    name,
    description
FROM
    boards
ORDER BY
    board_id
LIMIT
    $1
    OFFSET
    $2
`

type GetAllBoardsParams struct {
	Limit  int32
	Offset int32
}

type GetAllBoardsRow struct {
	Name        string
	Description pgtype.Text
}

func (q *Queries) GetAllBoards(ctx context.Context, arg GetAllBoardsParams) ([]GetAllBoardsRow, error) {
	rows, err := q.db.Query(ctx, getAllBoards, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBoardsRow
	for rows.Next() {
		var i GetAllBoardsRow
		if err := rows.Scan(&i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllStatuses = `-- name: GetAllStatuses :many
SELECT status_id, user_id, label, created_date FROM statuses
ORDER BY
    created_date
LIMIT
    $1
    OFFSET
    $2
`

type GetAllStatusesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetAllStatuses(ctx context.Context, arg GetAllStatusesParams) ([]Status, error) {
	rows, err := q.db.Query(ctx, getAllStatuses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Status
	for rows.Next() {
		var i Status
		if err := rows.Scan(
			&i.StatusID,
			&i.UserID,
			&i.Label,
			&i.CreatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT
    username,
    full_name,
    bio
FROM
    users
ORDER BY
    user_id
LIMIT
    $1
    OFFSET
    $2
`

type GetAllUsersParams struct {
	Limit  int32
	Offset int32
}

type GetAllUsersRow struct {
	Username string
	FullName pgtype.Text
	Bio      pgtype.Text
}

func (q *Queries) GetAllUsers(ctx context.Context, arg GetAllUsersParams) ([]GetAllUsersRow, error) {
	rows, err := q.db.Query(ctx, getAllUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(&i.Username, &i.FullName, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBoardById = `-- name: GetBoardById :one
SELECT
    name,
    description
FROM
    boards
WHERE
    board_id = $1
LIMIT
    1
`

type GetBoardByIdRow struct {
	Name        string
	Description pgtype.Text
}

func (q *Queries) GetBoardById(ctx context.Context, boardID pgtype.Int8) (GetBoardByIdRow, error) {
	row := q.db.QueryRow(ctx, getBoardById, boardID)
	var i GetBoardByIdRow
	err := row.Scan(&i.Name, &i.Description)
	return i, err
}

const getBoardItem = `-- name: GetBoardItem :one
SELECT
    board_item_id,
    item_id,
    board_item_id
FROM
    board_items
WHERE
    board_item_id = $1
LIMIT
    1
`

type GetBoardItemRow struct {
	BoardItemID   pgtype.Int8
	ItemID        pgtype.Int8
	BoardItemID_2 pgtype.Int8
}

func (q *Queries) GetBoardItem(ctx context.Context, boardItemID pgtype.Int8) (GetBoardItemRow, error) {
	row := q.db.QueryRow(ctx, getBoardItem, boardItemID)
	var i GetBoardItemRow
	err := row.Scan(&i.BoardItemID, &i.ItemID, &i.BoardItemID_2)
	return i, err
}

const getBoardItemsForBoard = `-- name: GetBoardItemsForBoard :many
SELECT
    board_item_id,
    item_id,
    board_item_id
FROM
    board_items
WHERE
    board_id = $1
ORDER BY
    created_date
LIMIT
    $2
    OFFSET
    $3
`

type GetBoardItemsForBoardParams struct {
	BoardID pgtype.Int8
	Limit   int32
	Offset  int32
}

type GetBoardItemsForBoardRow struct {
	BoardItemID   pgtype.Int8
	ItemID        pgtype.Int8
	BoardItemID_2 pgtype.Int8
}

func (q *Queries) GetBoardItemsForBoard(ctx context.Context, arg GetBoardItemsForBoardParams) ([]GetBoardItemsForBoardRow, error) {
	rows, err := q.db.Query(ctx, getBoardItemsForBoard, arg.BoardID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBoardItemsForBoardRow
	for rows.Next() {
		var i GetBoardItemsForBoardRow
		if err := rows.Scan(&i.BoardItemID, &i.ItemID, &i.BoardItemID_2); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBoardItemsForUser = `-- name: GetBoardItemsForUser :many
SELECT
    board_item_id,
    item_id,
    board_item_id
FROM
    board_items
WHERE
    user_id = $1
ORDER BY
    created_date
LIMIT
    $2
    OFFSET
    $3
`

type GetBoardItemsForUserParams struct {
	UserID pgtype.Int8
	Limit  int32
	Offset int32
}

type GetBoardItemsForUserRow struct {
	BoardItemID   pgtype.Int8
	ItemID        pgtype.Int8
	BoardItemID_2 pgtype.Int8
}

func (q *Queries) GetBoardItemsForUser(ctx context.Context, arg GetBoardItemsForUserParams) ([]GetBoardItemsForUserRow, error) {
	rows, err := q.db.Query(ctx, getBoardItemsForUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBoardItemsForUserRow
	for rows.Next() {
		var i GetBoardItemsForUserRow
		if err := rows.Scan(&i.BoardItemID, &i.ItemID, &i.BoardItemID_2); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBoardsForUser = `-- name: GetBoardsForUser :many
SELECT
    name,
    description
FROM
    boards
WHERE
    user_id = $1
ORDER BY
    board_id
LIMIT
    $2
    OFFSET
    $3
`

type GetBoardsForUserParams struct {
	UserID pgtype.Int8
	Limit  int32
	Offset int32
}

type GetBoardsForUserRow struct {
	Name        string
	Description pgtype.Text
}

func (q *Queries) GetBoardsForUser(ctx context.Context, arg GetBoardsForUserParams) ([]GetBoardsForUserRow, error) {
	rows, err := q.db.Query(ctx, getBoardsForUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBoardsForUserRow
	for rows.Next() {
		var i GetBoardsForUserRow
		if err := rows.Scan(&i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReview = `-- name: GetReview :one
SELECT
    review_id, content, user_id, item_id, created_date
FROM
    reviews
WHERE
    review_id = $1
LIMIT
    1
`

func (q *Queries) GetReview(ctx context.Context, reviewID pgtype.Int8) (Review, error) {
	row := q.db.QueryRow(ctx, getReview, reviewID)
	var i Review
	err := row.Scan(
		&i.ReviewID,
		&i.Content,
		&i.UserID,
		&i.ItemID,
		&i.CreatedDate,
	)
	return i, err
}

const getReviewsForItem = `-- name: GetReviewsForItem :many
SELECT
    review_id, content, user_id, item_id, created_date
FROM
    reviews
WHERE
    item_id = $1
ORDER BY
    created_date
LIMIT
    $2
    OFFSET
    $3
`

type GetReviewsForItemParams struct {
	ItemID pgtype.Int8
	Limit  int32
	Offset int32
}

func (q *Queries) GetReviewsForItem(ctx context.Context, arg GetReviewsForItemParams) ([]Review, error) {
	rows, err := q.db.Query(ctx, getReviewsForItem, arg.ItemID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ReviewID,
			&i.Content,
			&i.UserID,
			&i.ItemID,
			&i.CreatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReviewsForUser = `-- name: GetReviewsForUser :many
SELECT
    review_id, content, user_id, item_id, created_date
FROM
    reviews
WHERE
    user_id = $1
ORDER BY
    created_date
LIMIT
    $2
    OFFSET
    $3
`

type GetReviewsForUserParams struct {
	UserID pgtype.Int8
	Limit  int32
	Offset int32
}

func (q *Queries) GetReviewsForUser(ctx context.Context, arg GetReviewsForUserParams) ([]Review, error) {
	rows, err := q.db.Query(ctx, getReviewsForUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ReviewID,
			&i.Content,
			&i.UserID,
			&i.ItemID,
			&i.CreatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStatus = `-- name: GetStatus :one
SELECT status_id, user_id, label, created_date FROM statuses
WHERE
    status_id = $1
LIMIT
    1
`

func (q *Queries) GetStatus(ctx context.Context, statusID pgtype.Int8) (Status, error) {
	row := q.db.QueryRow(ctx, getStatus, statusID)
	var i Status
	err := row.Scan(
		&i.StatusID,
		&i.UserID,
		&i.Label,
		&i.CreatedDate,
	)
	return i, err
}

const getStatusesForUser = `-- name: GetStatusesForUser :many
SELECT status_id, user_id, label, created_date FROM statuses
WHERE
    user_id = $1
ORDER BY
    created_date
LIMIT
    $2
OFFSET
    $3
`

type GetStatusesForUserParams struct {
	UserID pgtype.Int8
	Limit  int32
	Offset int32
}

func (q *Queries) GetStatusesForUser(ctx context.Context, arg GetStatusesForUserParams) ([]Status, error) {
	rows, err := q.db.Query(ctx, getStatusesForUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Status
	for rows.Next() {
		var i Status
		if err := rows.Scan(
			&i.StatusID,
			&i.UserID,
			&i.Label,
			&i.CreatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT
    username,
    full_name,
    bio
FROM
    users
WHERE
    user_id = $1
LIMIT
    1
`

type GetUserByIdRow struct {
	Username string
	FullName pgtype.Text
	Bio      pgtype.Text
}

func (q *Queries) GetUserById(ctx context.Context, userID pgtype.Int8) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, userID)
	var i GetUserByIdRow
	err := row.Scan(&i.Username, &i.FullName, &i.Bio)
	return i, err
}

const updateBoard = `-- name: UpdateBoard :one
UPDATE boards
SET
    name = $2,
    description = $3
WHERE
    board_id = $1
RETURNING
    board_id,
    name,
    description
`

type UpdateBoardParams struct {
	BoardID     pgtype.Int8
	Name        string
	Description pgtype.Text
}

type UpdateBoardRow struct {
	BoardID     pgtype.Int8
	Name        string
	Description pgtype.Text
}

func (q *Queries) UpdateBoard(ctx context.Context, arg UpdateBoardParams) (UpdateBoardRow, error) {
	row := q.db.QueryRow(ctx, updateBoard, arg.BoardID, arg.Name, arg.Description)
	var i UpdateBoardRow
	err := row.Scan(&i.BoardID, &i.Name, &i.Description)
	return i, err
}

const updateReview = `-- name: UpdateReview :one
UPDATE reviews
SET
    content = $2
WHERE
    review_id = $1
RETURNING
    review_id,
    item_id,
    content
`

type UpdateReviewParams struct {
	ReviewID pgtype.Int8
	Content  string
}

type UpdateReviewRow struct {
	ReviewID pgtype.Int8
	ItemID   pgtype.Int8
	Content  string
}

func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) (UpdateReviewRow, error) {
	row := q.db.QueryRow(ctx, updateReview, arg.ReviewID, arg.Content)
	var i UpdateReviewRow
	err := row.Scan(&i.ReviewID, &i.ItemID, &i.Content)
	return i, err
}

const updateUserDetails = `-- name: UpdateUserDetails :one
UPDATE users
SET
    username = $2,
    full_name = $3,
    bio = $4
WHERE
    user_id = $1
RETURNING
    username,
    full_name,
    bio
`

type UpdateUserDetailsParams struct {
	UserID   pgtype.Int8
	Username string
	FullName pgtype.Text
	Bio      pgtype.Text
}

type UpdateUserDetailsRow struct {
	Username string
	FullName pgtype.Text
	Bio      pgtype.Text
}

func (q *Queries) UpdateUserDetails(ctx context.Context, arg UpdateUserDetailsParams) (UpdateUserDetailsRow, error) {
	row := q.db.QueryRow(ctx, updateUserDetails,
		arg.UserID,
		arg.Username,
		arg.FullName,
		arg.Bio,
	)
	var i UpdateUserDetailsRow
	err := row.Scan(&i.Username, &i.FullName, &i.Bio)
	return i, err
}
